import type { MetadataRoute } from "next"
import { CHARACTERS, PATHS } from "@/data/variables"

// Helper function to generate the sitemap for character-related paths
function generateCharactersSitemap(): MetadataRoute.Sitemap {
  const baseUrl = "https://tekken.lol"

  // Generate sitemap for each character
  const characterSitemap: MetadataRoute.Sitemap = CHARACTERS.flatMap(
    (character) => {
      if (character.disabled) {
        return [] // Skip disabled characters
      }

      // Generate a list of paths for each character
      const characterPaths: MetadataRoute.Sitemap = Object.values(PATHS).map(
        (path) => {
          return {
            url: `${baseUrl}/${character.value}/${path}`,
            lastModified: new Date(),
            changeFrequency: "weekly" as const, // Explicitly define the allowed value
            priority: 0.7,
          }
        }
      )

      // Include the base character page
      return [
        // {
        //   url: `${baseUrl}/${character.value}`,
        //   lastModified: new Date(),
        //   changeFrequency: "weekly" as const, // Explicitly define the allowed value
        //   priority: 0.8,
        // },
        ...characterPaths,
      ]
    }
  )

  return characterSitemap
}

export default function sitemap(): MetadataRoute.Sitemap {
  // Static pages
  const staticPages: MetadataRoute.Sitemap = [
    {
      url: "https://tekken.lol",
      lastModified: new Date(),
      changeFrequency: "weekly" as const, // Explicitly define the allowed value
      priority: 1,
    },
    // {
    //   url: "https://tekken.lol/blog",
    //   lastModified: new Date(),
    //   changeFrequency: "weekly" as const, // Explicitly define the allowed value
    //   priority: 0.5,
    // },
  ]

  // Character-specific pages generated by the helper
  const characterSitemap = generateCharactersSitemap()

  // Combine both static and character sitemaps
  return [...staticPages, ...characterSitemap]
}
